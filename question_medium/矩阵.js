// 给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。

// 两个相邻元素间的距离为 1 。

// 示例 1:
// 输入:

// 0 0 0
// 0 1 0
// 0 0 0
// 输出:

// 0 0 0
// 0 1 0
// 0 0 0
// 示例 2:
// 输入:

// 0 0 0
// 0 1 0
// 1 1 1
// 输出:

// 0 0 0
// 0 1 0
// 1 2 1
// 注意:

// 给定矩阵的元素个数不超过 10000。
// 给定矩阵中至少有一个元素是 0。
// 矩阵中的元素只在四个方向上相邻: 上、下、左、右。

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/01-matrix
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

/**
 * @param {number[][]} matrix
 * @return {number[][]}
 */
var updateMatrix = function(matrix) {
  return matrix.map((item,i)=>{   return   item.map((cItem,j) =>{
            if(cItem !== 0){
                return demo(matrix,i,j)
            }
            return cItem
        })
    })
};

// 0 0 0 0 0 0 0
// 0 1 0 0 0 0 0
// 1 1 1 0 0 0 0
// 0 0 0 0 0 0 0
// 0 1 1 0 1 0 0
// 1 1 1 1 1 1 1
// 1 1 1 1 1 1 1
function demo(matrix,k,l,a= 1 ){
    for(let i =0 ;i <a ;i++){
        if(matrix[k+i] && matrix[k+i][l+a-i] ===0){
            return a
        }
        if(matrix[k-i] && matrix[k-i][l-(a-i)] ===0){
            return a
        }
        if(matrix[k-(a-i)] && matrix[k-(a-i)][l-i] ===0){
            return a
        }
        if(matrix[k+(a-i)] && matrix[k+(a-i)][l+i] ===0){
            return a
        }
        if(matrix[k+i] && matrix[k+i][l-(a-i)] ===0){
            return a
        }
        if(matrix[k-i] && matrix[k-i][l+(a-i)] ===0){
            return a
        }
        if(matrix[k+(a-i)] && matrix[k+(a-i)][l-i] ===0){
            return a
        }
        if(matrix[k-(a-i)] && matrix[k-(a-i)][l+i] ===0){
            return a
        }
    }
   return demo(matrix,k,l,++a)
}
console.log(updateMatrix(
    [[0,0,1,0,1,1,1,0,1,1],
    [1,1,1,1,0,1,1,1,1,1],
    [1,1,1,1,1,0,0,0,1,1],
    [1,0,1,0,1,1,1,0,1,1],
    [0,0,1,1,1,0,1,1,1,1],
    [1,0,1,1,1,1,1,1,1,1],
    [1,1,1,1,0,1,0,1,0,1],
    [0,1,0,0,0,1,0,0,1,1],
    [1,1,1,0,1,1,0,1,0,1],
    [1,0,1,1,1,0,1,1,1,0]],
    5,9))


// [0,0,1,0,1,2,1,0,1,2],
// [1,1,2,1,0,1,1,1,2,3],
// [2,1,2,1,1,0,0,0,1,2],
// [1,0,1,0,1,1,1,0,1,2],
// [0,0,1,1,1,0,1,1,2,3],
// [1,0,1,2,1,1,1,2,1,4],
// [1,1,1,1,0,1,0,1,0,1],
// [0,1,0,0,0,1,0,0,1,2],
// [1,1,1,0,1,1,0,1,0,1],
// [1,0,1,1,1,0,1,2,1,0]

// [0,0,1,0,1,2,1,0,1,2],
// [1,1,2,1,0,1,1,1,2,3],
// [2,1,2,1,1,0,0,0,1,2],
// [1,0,1,0,1,1,1,0,1,2],
// [0,0,1,1,1,0,1,1,2,3],
// [1,0,1,2,1,1,1,2,1,2],
// [1,1,1,1,0,1,0,1,0,1],
// [0,1,0,0,0,1,0,0,1,2],
// [1,1,1,0,1,1,0,1,0,1],
// [1,0,1,1,1,0,1,2,1,0]
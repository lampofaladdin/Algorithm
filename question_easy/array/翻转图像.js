// 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。

// 水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。

// 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。

// 示例 1:

// 输入: [[1,1,0],[1,0,1],[0,0,0]]
// 输出: [[1,0,0],[0,1,0],[1,1,1]]
// 解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
//      然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
// 示例 2:

// 输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
// 输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
// 解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
//      然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
// 说明:

// 1 <= A.length = A[0].length <= 20
// 0 <= A[i][j] <= 1

/**
 * @param {number[][]} A
 * @return {number[][]}
 */
var flipAndInvertImage = function (A) {
    let result = [];
    A.forEach(item => {
        result.push(item.reverse().map(childItem => childItem === 0 ? 1 : 0))
    })
    return result;
};

// 题解：
// 循环二维数组得到数字数组， 数字数组使用reverse方法翻转，得到顺序反转的数字数组， 然后map遍历， 反转数字， push的result数组。

/**
 * 骚操作
 * @param {number[][]} A
 * @return {number[][]}
 */
var flipAndInvertImage = function (A) {
    return A.map(arr => {
        return arr.reverse()
            .map(item => Number(!item));
    });
};
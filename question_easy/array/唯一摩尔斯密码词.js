// 国际摩尔斯密码定义一种标准编码方式，将每个字母对应于一个由一系列点和短线组成的字符串， 比如: "a" 对应 ".-", "b" 对应 "-...", "c" 对应 "-.-.", 等等。

// 为了方便，所有26个英文字母对应摩尔斯密码表如下：

// [".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
// 给定一个单词列表，每个单词可以写成每个字母对应摩尔斯密码的组合。例如，"cab" 可以写成 "-.-..--..."，(即 "-.-." + "-..." + ".-"字符串的结合)。我们将这样一个连接过程称作单词翻译。

// 返回我们可以获得所有词不同单词翻译的数量。

// 例如:
// 输入: words = ["gin", "zen", "gig", "msg"]
// 输出: 2
// 解释: 
// 各单词翻译如下:
// "gin" -> "--...-."
// "zen" -> "--...-."
// "gig" -> "--...--."
// "msg" -> "--...--."

// 共有 2 种不同翻译, "--...-." 和 "--...--.".
//  

// 注意:

// 单词列表words 的长度不会超过 100。
// 每个单词 words[i]的长度范围为 [1, 12]。
// 每个单词 words[i]只包含小写字母。


/**
 * 解法1
 * @param {string[]} words
 * @return {number}
 */
var uniqueMorseRepresentations = function (words) {
    let setter = new Set();
    let code = {
        a: ".-",
        b: "-...",
        c: "-.-.",
        d: "-..",
        e: ".",
        f: "..-.",
        g: "--.",
        h: "....",
        i: "..",
        j: ".---",
        k: "-.-",
        l: ".-..",
        m: "--",
        n: "-.",
        o: "---",
        p: ".--.",
        q: "--.-",
        r: ".-.",
        s: "...",
        t: "-",
        u: "..-",
        v: "...-",
        w: ".--",
        x: "-..-",
        y: "-.--",
        z: "--.."
    }

    words.forEach(item => {
        let str = "";
        item.split("").forEach(childCode => {
            str += code[childCode];
        });
        setter.add(str);
    })
    return setter.size;
};

// 题解：
// 将字典作为一个数组，循环输入内容得到item，item分解再次循环得到每个字母，通过对象找到字母对应的code，加到str内，使用set，可以统计内容

/**
 * 题解2
 * @param {string[]} words
 * @return {number}
 */
var uniqueMorseRepresentations = function (words) {
    let maps = [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."]
    _words = []
    for (word of words) {
        _words.push(word.split('').map(x => maps[x.charCodeAt() - 97]).join(''))
    }
    return [...new Set(_words)].length
};

// 题解：
// 循环words数组，得到word，word分解，map遍历，根据x的charcode减去a的charcode，得到maps中对应的内容,为一个数组，使用join转换成字符串，push到_words中，使用new set()，得到不重复的内容，解构数组，放到set中，返回数组的长度.
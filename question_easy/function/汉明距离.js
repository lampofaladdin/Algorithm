// 两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。

// 给出两个整数 x 和 y，计算它们之间的汉明距离。

// 注意：
// 0 ≤ x, y < 231.

// 示例:

// 输入: x = 1, y = 4

// 输出: 2

// 解释:
// 1   (0 0 0 1)
// 4   (0 1 0 0)
//        ↑   ↑

/**
 * @param {number} x
 * @param {number} y
 * @return {number}
 */
var hammingDistance = function (x, y) {
    return (x ^ y).toString(2).split("").filter(item => item == '1').length;
};
hammingDistance(1, 4);

// 题解：
// 汉明距离它就是将一个字符串变换成另外一个字符串所需要替换的字符个数

// 1011101 与 1001001 之间的汉明距离是 2。
// 2143896 与 2233796 之间的汉明距离是 3。
// "toned" 与 "roses" 之间的汉明距离是 3。

// 异或运算规则
// 1^1 0
// 1^0 1
// 0^1 1
// 0^0 0

// 异或运算，相同的内容运算为0 不同的为1
// 所以不同内容的数量，就是1的数量
// 异或运算后，过滤为1的数量，得出数组的长度为汉明距离